// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	service "github.com/sergeizaitcev/gophermart/internal/gophermart/service"
	monetary "github.com/sergeizaitcev/gophermart/pkg/monetary"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockStorage) Balance(ctx context.Context, userID uuid.UUID) (*service.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", ctx, userID)
	ret0, _ := ret[0].(*service.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockStorageMockRecorder) Balance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockStorage)(nil).Balance), ctx, userID)
}

// CreateOperation mocks base method.
func (m *MockStorage) CreateOperation(ctx context.Context, userID uuid.UUID, order string, amount monetary.Unit) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperation", ctx, userID, order, amount)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOperation indicates an expected call of CreateOperation.
func (mr *MockStorageMockRecorder) CreateOperation(ctx, userID, order, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperation", reflect.TypeOf((*MockStorage)(nil).CreateOperation), ctx, userID, order, amount)
}

// CreateOrder mocks base method.
func (m *MockStorage) CreateOrder(ctx context.Context, userID uuid.UUID, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStorageMockRecorder) CreateOrder(ctx, userID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStorage)(nil).CreateOrder), ctx, userID, order)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(ctx context.Context, u service.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), ctx, u)
}

// Operations mocks base method.
func (m *MockStorage) Operations(ctx context.Context, userID uuid.UUID) ([]service.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operations", ctx, userID)
	ret0, _ := ret[0].([]service.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Operations indicates an expected call of Operations.
func (mr *MockStorageMockRecorder) Operations(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operations", reflect.TypeOf((*MockStorage)(nil).Operations), ctx, userID)
}

// OrderStatus mocks base method.
func (m *MockStorage) OrderStatus(ctx context.Context, order string) (service.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderStatus", ctx, order)
	ret0, _ := ret[0].(service.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderStatus indicates an expected call of OrderStatus.
func (mr *MockStorageMockRecorder) OrderStatus(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderStatus", reflect.TypeOf((*MockStorage)(nil).OrderStatus), ctx, order)
}

// Orders mocks base method.
func (m *MockStorage) Orders(ctx context.Context, userID uuid.UUID) ([]service.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders", ctx, userID)
	ret0, _ := ret[0].([]service.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Orders indicates an expected call of Orders.
func (mr *MockStorageMockRecorder) Orders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockStorage)(nil).Orders), ctx, userID)
}

// PerformOperation mocks base method.
func (m *MockStorage) PerformOperation(ctx context.Context, operationID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformOperation", ctx, operationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformOperation indicates an expected call of PerformOperation.
func (mr *MockStorageMockRecorder) PerformOperation(ctx, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformOperation", reflect.TypeOf((*MockStorage)(nil).PerformOperation), ctx, operationID)
}

// UpdateOperationStatus mocks base method.
func (m *MockStorage) UpdateOperationStatus(ctx context.Context, order string, status service.OperationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationStatus", ctx, order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperationStatus indicates an expected call of UpdateOperationStatus.
func (mr *MockStorageMockRecorder) UpdateOperationStatus(ctx, order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationStatus", reflect.TypeOf((*MockStorage)(nil).UpdateOperationStatus), ctx, order, status)
}

// UpdateOrder mocks base method.
func (m *MockStorage) UpdateOrder(ctx context.Context, order string, status service.OrderStatus, accrual monetary.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStorageMockRecorder) UpdateOrder(ctx, order, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStorage)(nil).UpdateOrder), ctx, order, status, accrual)
}

// UpdateOrderStatus mocks base method.
func (m *MockStorage) UpdateOrderStatus(ctx context.Context, order string, status service.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStorageMockRecorder) UpdateOrderStatus(ctx, order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStorage)(nil).UpdateOrderStatus), ctx, order, status)
}

// UserExists mocks base method.
func (m *MockStorage) UserExists(ctx context.Context, userID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockStorageMockRecorder) UserExists(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockStorage)(nil).UserExists), ctx, userID)
}

// UserID mocks base method.
func (m *MockStorage) UserID(ctx context.Context, u service.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserID", ctx, u)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserID indicates an expected call of UserID.
func (mr *MockStorageMockRecorder) UserID(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockStorage)(nil).UserID), ctx, u)
}

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockUsers) Balance(ctx context.Context, userID uuid.UUID) (*service.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", ctx, userID)
	ret0, _ := ret[0].(*service.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockUsersMockRecorder) Balance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockUsers)(nil).Balance), ctx, userID)
}

// CreateUser mocks base method.
func (m *MockUsers) CreateUser(ctx context.Context, u service.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsers)(nil).CreateUser), ctx, u)
}

// UserExists mocks base method.
func (m *MockUsers) UserExists(ctx context.Context, userID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockUsersMockRecorder) UserExists(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockUsers)(nil).UserExists), ctx, userID)
}

// UserID mocks base method.
func (m *MockUsers) UserID(ctx context.Context, u service.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserID", ctx, u)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserID indicates an expected call of UserID.
func (mr *MockUsersMockRecorder) UserID(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockUsers)(nil).UserID), ctx, u)
}

// MockOrders is a mock of Orders interface.
type MockOrders struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersMockRecorder
}

// MockOrdersMockRecorder is the mock recorder for MockOrders.
type MockOrdersMockRecorder struct {
	mock *MockOrders
}

// NewMockOrders creates a new mock instance.
func NewMockOrders(ctrl *gomock.Controller) *MockOrders {
	mock := &MockOrders{ctrl: ctrl}
	mock.recorder = &MockOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrders) EXPECT() *MockOrdersMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrders) CreateOrder(ctx context.Context, userID uuid.UUID, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersMockRecorder) CreateOrder(ctx, userID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrders)(nil).CreateOrder), ctx, userID, order)
}

// OrderStatus mocks base method.
func (m *MockOrders) OrderStatus(ctx context.Context, order string) (service.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderStatus", ctx, order)
	ret0, _ := ret[0].(service.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderStatus indicates an expected call of OrderStatus.
func (mr *MockOrdersMockRecorder) OrderStatus(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderStatus", reflect.TypeOf((*MockOrders)(nil).OrderStatus), ctx, order)
}

// Orders mocks base method.
func (m *MockOrders) Orders(ctx context.Context, userID uuid.UUID) ([]service.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders", ctx, userID)
	ret0, _ := ret[0].([]service.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Orders indicates an expected call of Orders.
func (mr *MockOrdersMockRecorder) Orders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockOrders)(nil).Orders), ctx, userID)
}

// UpdateOrder mocks base method.
func (m *MockOrders) UpdateOrder(ctx context.Context, order string, status service.OrderStatus, accrual monetary.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrdersMockRecorder) UpdateOrder(ctx, order, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrders)(nil).UpdateOrder), ctx, order, status, accrual)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrders) UpdateOrderStatus(ctx context.Context, order string, status service.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrdersMockRecorder) UpdateOrderStatus(ctx, order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrders)(nil).UpdateOrderStatus), ctx, order, status)
}

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// CreateOperation mocks base method.
func (m *MockOperations) CreateOperation(ctx context.Context, userID uuid.UUID, order string, amount monetary.Unit) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperation", ctx, userID, order, amount)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOperation indicates an expected call of CreateOperation.
func (mr *MockOperationsMockRecorder) CreateOperation(ctx, userID, order, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperation", reflect.TypeOf((*MockOperations)(nil).CreateOperation), ctx, userID, order, amount)
}

// Operations mocks base method.
func (m *MockOperations) Operations(ctx context.Context, userID uuid.UUID) ([]service.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operations", ctx, userID)
	ret0, _ := ret[0].([]service.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Operations indicates an expected call of Operations.
func (mr *MockOperationsMockRecorder) Operations(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operations", reflect.TypeOf((*MockOperations)(nil).Operations), ctx, userID)
}

// PerformOperation mocks base method.
func (m *MockOperations) PerformOperation(ctx context.Context, operationID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformOperation", ctx, operationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformOperation indicates an expected call of PerformOperation.
func (mr *MockOperationsMockRecorder) PerformOperation(ctx, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformOperation", reflect.TypeOf((*MockOperations)(nil).PerformOperation), ctx, operationID)
}

// UpdateOperationStatus mocks base method.
func (m *MockOperations) UpdateOperationStatus(ctx context.Context, order string, status service.OperationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationStatus", ctx, order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperationStatus indicates an expected call of UpdateOperationStatus.
func (mr *MockOperationsMockRecorder) UpdateOperationStatus(ctx, order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationStatus", reflect.TypeOf((*MockOperations)(nil).UpdateOperationStatus), ctx, order, status)
}

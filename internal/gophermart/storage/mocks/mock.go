// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	storage "github.com/sergeizaitcev/gophermart/internal/gophermart/storage"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuth) CreateUser(ctx context.Context, login, password string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, login, password)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthMockRecorder) CreateUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuth)(nil).CreateUser), ctx, login, password)
}

// GetUser mocks base method.
func (m *MockAuth) GetUser(ctx context.Context, login, passwrod string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login, passwrod)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthMockRecorder) GetUser(ctx, login, passwrod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuth)(nil).GetUser), ctx, login, passwrod)
}

// MockGophermartDB is a mock of GophermartDB interface.
type MockGophermartDB struct {
	ctrl     *gomock.Controller
	recorder *MockGophermartDBMockRecorder
}

// MockGophermartDBMockRecorder is the mock recorder for MockGophermartDB.
type MockGophermartDBMockRecorder struct {
	mock *MockGophermartDB
}

// NewMockGophermartDB creates a new mock instance.
func NewMockGophermartDB(ctrl *gomock.Controller) *MockGophermartDB {
	mock := &MockGophermartDB{ctrl: ctrl}
	mock.recorder = &MockGophermartDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophermartDB) EXPECT() *MockGophermartDBMockRecorder {
	return m.recorder
}

// CreateBalanceOperation mocks base method.
func (m *MockGophermartDB) CreateBalanceOperation(ctx context.Context, operation *storage.BalanceOperationItem) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalanceOperation", ctx, operation)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBalanceOperation indicates an expected call of CreateBalanceOperation.
func (mr *MockGophermartDBMockRecorder) CreateBalanceOperation(ctx, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalanceOperation", reflect.TypeOf((*MockGophermartDB)(nil).CreateBalanceOperation), ctx, operation)
}

// CreateOrder mocks base method.
func (m *MockGophermartDB) CreateOrder(ctx context.Context, orderNumber int64) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, orderNumber)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockGophermartDBMockRecorder) CreateOrder(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockGophermartDB)(nil).CreateOrder), ctx, orderNumber)
}

// DeleteBalanceOperation mocks base method.
func (m *MockGophermartDB) DeleteBalanceOperation(ctx context.Context, operationID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBalanceOperation", ctx, operationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBalanceOperation indicates an expected call of DeleteBalanceOperation.
func (mr *MockGophermartDBMockRecorder) DeleteBalanceOperation(ctx, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBalanceOperation", reflect.TypeOf((*MockGophermartDB)(nil).DeleteBalanceOperation), ctx, operationID)
}

// DeleteOrderByNumber mocks base method.
func (m *MockGophermartDB) DeleteOrderByNumber(ctx context.Context, orderNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderByNumber", ctx, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderByNumber indicates an expected call of DeleteOrderByNumber.
func (mr *MockGophermartDBMockRecorder) DeleteOrderByNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderByNumber", reflect.TypeOf((*MockGophermartDB)(nil).DeleteOrderByNumber), ctx, orderNumber)
}

// GetBalanceByUserID mocks base method.
func (m *MockGophermartDB) GetBalanceByUserID(ctx context.Context, userID uuid.UUID) (*storage.BalanceItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUserID", ctx, userID)
	ret0, _ := ret[0].(*storage.BalanceItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUserID indicates an expected call of GetBalanceByUserID.
func (mr *MockGophermartDBMockRecorder) GetBalanceByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUserID", reflect.TypeOf((*MockGophermartDB)(nil).GetBalanceByUserID), ctx, userID)
}

// GetBalanceOperationByBalanceID mocks base method.
func (m *MockGophermartDB) GetBalanceOperationByBalanceID(ctx context.Context, balanceID uuid.UUID) ([]*storage.BalanceOperationItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceOperationByBalanceID", ctx, balanceID)
	ret0, _ := ret[0].([]*storage.BalanceOperationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceOperationByBalanceID indicates an expected call of GetBalanceOperationByBalanceID.
func (mr *MockGophermartDBMockRecorder) GetBalanceOperationByBalanceID(ctx, balanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceOperationByBalanceID", reflect.TypeOf((*MockGophermartDB)(nil).GetBalanceOperationByBalanceID), ctx, balanceID)
}

// GetBalanceOperationByOrderID mocks base method.
func (m *MockGophermartDB) GetBalanceOperationByOrderID(ctx context.Context, orderID uuid.UUID) (*storage.BalanceOperationItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceOperationByOrderID", ctx, orderID)
	ret0, _ := ret[0].(*storage.BalanceOperationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceOperationByOrderID indicates an expected call of GetBalanceOperationByOrderID.
func (mr *MockGophermartDBMockRecorder) GetBalanceOperationByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceOperationByOrderID", reflect.TypeOf((*MockGophermartDB)(nil).GetBalanceOperationByOrderID), ctx, orderID)
}

// GetOrderByNumber mocks base method.
func (m *MockGophermartDB) GetOrderByNumber(ctx context.Context, orderNumber int64) (*storage.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", ctx, orderNumber)
	ret0, _ := ret[0].(*storage.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockGophermartDBMockRecorder) GetOrderByNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockGophermartDB)(nil).GetOrderByNumber), ctx, orderNumber)
}

// UpdateBalance mocks base method.
func (m *MockGophermartDB) UpdateBalance(ctx context.Context, userID uuid.UUID, currentSum int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, userID, currentSum)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockGophermartDBMockRecorder) UpdateBalance(ctx, userID, currentSum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockGophermartDB)(nil).UpdateBalance), ctx, userID, currentSum)
}

// UpdateBalanceOperation mocks base method.
func (m *MockGophermartDB) UpdateBalanceOperation(ctx context.Context, operation *storage.BalanceOperationItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceOperation", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceOperation indicates an expected call of UpdateBalanceOperation.
func (mr *MockGophermartDBMockRecorder) UpdateBalanceOperation(ctx, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceOperation", reflect.TypeOf((*MockGophermartDB)(nil).UpdateBalanceOperation), ctx, operation)
}

// UpdateOrder mocks base method.
func (m *MockGophermartDB) UpdateOrder(ctx context.Context, order *storage.UpdateOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockGophermartDBMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockGophermartDB)(nil).UpdateOrder), ctx, order)
}

// UpdateOrderStatus mocks base method.
func (m *MockGophermartDB) UpdateOrderStatus(ctx context.Context, orderNumber int64, orderStatus string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, orderNumber, orderStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockGophermartDBMockRecorder) UpdateOrderStatus(ctx, orderNumber, orderStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockGophermartDB)(nil).UpdateOrderStatus), ctx, orderNumber, orderStatus)
}

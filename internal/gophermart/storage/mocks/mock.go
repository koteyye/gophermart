// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	storage "github.com/sergeizaitcev/gophermart/internal/gophermart/storage"
	monetary "github.com/sergeizaitcev/gophermart/pkg/monetary"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateOperation mocks base method.
func (m *MockStorage) CreateOperation(ctx context.Context, userID uuid.UUID, order string, amount monetary.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperation", ctx, userID, order, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOperation indicates an expected call of CreateOperation.
func (mr *MockStorageMockRecorder) CreateOperation(ctx, userID, order, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperation", reflect.TypeOf((*MockStorage)(nil).CreateOperation), ctx, userID, order, amount)
}

// CreateOrder mocks base method.
func (m *MockStorage) CreateOrder(ctx context.Context, userID uuid.UUID, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStorageMockRecorder) CreateOrder(ctx, userID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStorage)(nil).CreateOrder), ctx, userID, order)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(ctx context.Context, login, password string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, login, password)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), ctx, login, password)
}

// DeleteOperation mocks base method.
func (m *MockStorage) DeleteOperation(ctx context.Context, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperation", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperation indicates an expected call of DeleteOperation.
func (mr *MockStorageMockRecorder) DeleteOperation(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperation", reflect.TypeOf((*MockStorage)(nil).DeleteOperation), ctx, order)
}

// DeleteOrder mocks base method.
func (m *MockStorage) DeleteOrder(ctx context.Context, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockStorageMockRecorder) DeleteOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockStorage)(nil).DeleteOrder), ctx, order)
}

// GetBalance mocks base method.
func (m *MockStorage) GetBalance(ctx context.Context, userID uuid.UUID) (*storage.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(*storage.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStorageMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStorage)(nil).GetBalance), ctx, userID)
}

// GetLogin mocks base method.
func (m *MockStorage) GetLogin(ctx context.Context, userID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockStorageMockRecorder) GetLogin(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockStorage)(nil).GetLogin), ctx, userID)
}

// GetOperation mocks base method.
func (m *MockStorage) GetOperation(ctx context.Context, order string) (*storage.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", ctx, order)
	ret0, _ := ret[0].(*storage.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockStorageMockRecorder) GetOperation(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockStorage)(nil).GetOperation), ctx, order)
}

// GetOperations mocks base method.
func (m *MockStorage) GetOperations(ctx context.Context, userID uuid.UUID) ([]storage.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", ctx, userID)
	ret0, _ := ret[0].([]storage.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockStorageMockRecorder) GetOperations(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockStorage)(nil).GetOperations), ctx, userID)
}

// GetOrder mocks base method.
func (m *MockStorage) GetOrder(ctx context.Context, order string) (*storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, order)
	ret0, _ := ret[0].(*storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStorageMockRecorder) GetOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStorage)(nil).GetOrder), ctx, order)
}

// GetOrders mocks base method.
func (m *MockStorage) GetOrders(ctx context.Context, userID uuid.UUID) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockStorageMockRecorder) GetOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockStorage)(nil).GetOrders), ctx, userID)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(ctx context.Context, login, password string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login, password)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), ctx, login, password)
}

// UpdateBalance mocks base method.
func (m *MockStorage) UpdateBalance(ctx context.Context, userID uuid.UUID, amount monetary.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockStorageMockRecorder) UpdateBalance(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockStorage)(nil).UpdateBalance), ctx, userID, amount)
}

// UpdateOperationStatus mocks base method.
func (m *MockStorage) UpdateOperationStatus(ctx context.Context, order string, status storage.OperationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationStatus", ctx, order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperationStatus indicates an expected call of UpdateOperationStatus.
func (mr *MockStorageMockRecorder) UpdateOperationStatus(ctx, order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationStatus", reflect.TypeOf((*MockStorage)(nil).UpdateOperationStatus), ctx, order, status)
}

// UpdateOrder mocks base method.
func (m *MockStorage) UpdateOrder(ctx context.Context, order string, status storage.OrderStatus, accrual monetary.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStorageMockRecorder) UpdateOrder(ctx, order, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStorage)(nil).UpdateOrder), ctx, order, status, accrual)
}

// UpdateOrderStatus mocks base method.
func (m *MockStorage) UpdateOrderStatus(ctx context.Context, order string, status storage.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStorageMockRecorder) UpdateOrderStatus(ctx, order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStorage)(nil).UpdateOrderStatus), ctx, order, status)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuth) CreateUser(ctx context.Context, login, password string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, login, password)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthMockRecorder) CreateUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuth)(nil).CreateUser), ctx, login, password)
}

// GetLogin mocks base method.
func (m *MockAuth) GetLogin(ctx context.Context, userID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockAuthMockRecorder) GetLogin(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockAuth)(nil).GetLogin), ctx, userID)
}

// GetUser mocks base method.
func (m *MockAuth) GetUser(ctx context.Context, login, password string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login, password)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthMockRecorder) GetUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuth)(nil).GetUser), ctx, login, password)
}

// MockBalance is a mock of Balance interface.
type MockBalance struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceMockRecorder
}

// MockBalanceMockRecorder is the mock recorder for MockBalance.
type MockBalanceMockRecorder struct {
	mock *MockBalance
}

// NewMockBalance creates a new mock instance.
func NewMockBalance(ctrl *gomock.Controller) *MockBalance {
	mock := &MockBalance{ctrl: ctrl}
	mock.recorder = &MockBalanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalance) EXPECT() *MockBalanceMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockBalance) GetBalance(ctx context.Context, userID uuid.UUID) (*storage.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(*storage.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBalanceMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalance)(nil).GetBalance), ctx, userID)
}

// UpdateBalance mocks base method.
func (m *MockBalance) UpdateBalance(ctx context.Context, userID uuid.UUID, amount monetary.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockBalanceMockRecorder) UpdateBalance(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockBalance)(nil).UpdateBalance), ctx, userID, amount)
}

// MockOrders is a mock of Orders interface.
type MockOrders struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersMockRecorder
}

// MockOrdersMockRecorder is the mock recorder for MockOrders.
type MockOrdersMockRecorder struct {
	mock *MockOrders
}

// NewMockOrders creates a new mock instance.
func NewMockOrders(ctrl *gomock.Controller) *MockOrders {
	mock := &MockOrders{ctrl: ctrl}
	mock.recorder = &MockOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrders) EXPECT() *MockOrdersMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrders) CreateOrder(ctx context.Context, userID uuid.UUID, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersMockRecorder) CreateOrder(ctx, userID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrders)(nil).CreateOrder), ctx, userID, order)
}

// DeleteOrder mocks base method.
func (m *MockOrders) DeleteOrder(ctx context.Context, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrdersMockRecorder) DeleteOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrders)(nil).DeleteOrder), ctx, order)
}

// GetOrder mocks base method.
func (m *MockOrders) GetOrder(ctx context.Context, order string) (*storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, order)
	ret0, _ := ret[0].(*storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrdersMockRecorder) GetOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrders)(nil).GetOrder), ctx, order)
}

// GetOrders mocks base method.
func (m *MockOrders) GetOrders(ctx context.Context, userID uuid.UUID) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrdersMockRecorder) GetOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrders)(nil).GetOrders), ctx, userID)
}

// UpdateOrder mocks base method.
func (m *MockOrders) UpdateOrder(ctx context.Context, order string, status storage.OrderStatus, accrual monetary.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrdersMockRecorder) UpdateOrder(ctx, order, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrders)(nil).UpdateOrder), ctx, order, status, accrual)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrders) UpdateOrderStatus(ctx context.Context, order string, status storage.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrdersMockRecorder) UpdateOrderStatus(ctx, order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrders)(nil).UpdateOrderStatus), ctx, order, status)
}

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// CreateOperation mocks base method.
func (m *MockOperations) CreateOperation(ctx context.Context, userID uuid.UUID, order string, amount monetary.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperation", ctx, userID, order, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOperation indicates an expected call of CreateOperation.
func (mr *MockOperationsMockRecorder) CreateOperation(ctx, userID, order, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperation", reflect.TypeOf((*MockOperations)(nil).CreateOperation), ctx, userID, order, amount)
}

// DeleteOperation mocks base method.
func (m *MockOperations) DeleteOperation(ctx context.Context, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperation", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperation indicates an expected call of DeleteOperation.
func (mr *MockOperationsMockRecorder) DeleteOperation(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperation", reflect.TypeOf((*MockOperations)(nil).DeleteOperation), ctx, order)
}

// GetOperation mocks base method.
func (m *MockOperations) GetOperation(ctx context.Context, order string) (*storage.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", ctx, order)
	ret0, _ := ret[0].(*storage.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockOperationsMockRecorder) GetOperation(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockOperations)(nil).GetOperation), ctx, order)
}

// GetOperations mocks base method.
func (m *MockOperations) GetOperations(ctx context.Context, userID uuid.UUID) ([]storage.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", ctx, userID)
	ret0, _ := ret[0].([]storage.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockOperationsMockRecorder) GetOperations(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockOperations)(nil).GetOperations), ctx, userID)
}

// UpdateOperationStatus mocks base method.
func (m *MockOperations) UpdateOperationStatus(ctx context.Context, order string, status storage.OperationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationStatus", ctx, order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperationStatus indicates an expected call of UpdateOperationStatus.
func (mr *MockOperationsMockRecorder) UpdateOperationStatus(ctx, order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationStatus", reflect.TypeOf((*MockOperations)(nil).UpdateOperationStatus), ctx, order, status)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/sergeizaitcev/gophermart/internal/gophermart/domain"
)

// MockAccrualClient is a mock of AccrualClient interface.
type MockAccrualClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualClientMockRecorder
}

// MockAccrualClientMockRecorder is the mock recorder for MockAccrualClient.
type MockAccrualClientMockRecorder struct {
	mock *MockAccrualClient
}

// NewMockAccrualClient creates a new mock instance.
func NewMockAccrualClient(ctrl *gomock.Controller) *MockAccrualClient {
	mock := &MockAccrualClient{ctrl: ctrl}
	mock.recorder = &MockAccrualClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualClient) EXPECT() *MockAccrualClientMockRecorder {
	return m.recorder
}

// GetAccrualInfo mocks base method.
func (m *MockAccrualClient) GetAccrualInfo(ctx context.Context, number domain.OrderNumber) (domain.AccrualInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccrualInfo", ctx, number)
	ret0, _ := ret[0].(domain.AccrualInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccrualInfo indicates an expected call of GetAccrualInfo.
func (mr *MockAccrualClientMockRecorder) GetAccrualInfo(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccrualInfo", reflect.TypeOf((*MockAccrualClient)(nil).GetAccrualInfo), ctx, number)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Identify mocks base method.
func (m *MockAuthService) Identify(ctx context.Context, id domain.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identify", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Identify indicates an expected call of Identify.
func (mr *MockAuthServiceMockRecorder) Identify(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockAuthService)(nil).Identify), ctx, id)
}

// SignIn mocks base method.
func (m *MockAuthService) SignIn(ctx context.Context, auth domain.Authentication) (domain.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, auth)
	ret0, _ := ret[0].(domain.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceMockRecorder) SignIn(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthService)(nil).SignIn), ctx, auth)
}

// SignUp mocks base method.
func (m *MockAuthService) SignUp(ctx context.Context, auth domain.Authentication) (domain.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, auth)
	ret0, _ := ret[0].(domain.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthServiceMockRecorder) SignUp(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthService)(nil).SignUp), ctx, auth)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockUserService) GetBalance(ctx context.Context, id domain.UserID) (domain.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, id)
	ret0, _ := ret[0].(domain.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockUserServiceMockRecorder) GetBalance(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockUserService)(nil).GetBalance), ctx, id)
}

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// GetOrders mocks base method.
func (m *MockOrderService) GetOrders(ctx context.Context, id domain.UserID) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, id)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderServiceMockRecorder) GetOrders(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderService)(nil).GetOrders), ctx, id)
}

// Process mocks base method.
func (m *MockOrderService) Process(ctx context.Context, order domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockOrderServiceMockRecorder) Process(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockOrderService)(nil).Process), ctx, order)
}

// MockOperationService is a mock of OperationService interface.
type MockOperationService struct {
	ctrl     *gomock.Controller
	recorder *MockOperationServiceMockRecorder
}

// MockOperationServiceMockRecorder is the mock recorder for MockOperationService.
type MockOperationServiceMockRecorder struct {
	mock *MockOperationService
}

// NewMockOperationService creates a new mock instance.
func NewMockOperationService(ctrl *gomock.Controller) *MockOperationService {
	mock := &MockOperationService{ctrl: ctrl}
	mock.recorder = &MockOperationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationService) EXPECT() *MockOperationServiceMockRecorder {
	return m.recorder
}

// GetOperations mocks base method.
func (m *MockOperationService) GetOperations(ctx context.Context, id domain.UserID) ([]domain.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", ctx, id)
	ret0, _ := ret[0].([]domain.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockOperationServiceMockRecorder) GetOperations(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockOperationService)(nil).GetOperations), ctx, id)
}

// Perform mocks base method.
func (m *MockOperationService) Perform(ctx context.Context, operation domain.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Perform", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Perform indicates an expected call of Perform.
func (mr *MockOperationServiceMockRecorder) Perform(ctx, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Perform", reflect.TypeOf((*MockOperationService)(nil).Perform), ctx, operation)
}
